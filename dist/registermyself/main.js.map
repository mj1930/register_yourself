{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/create/create.component.css","webpack:///./src/app/create/create.component.html","webpack:///./src/app/create/create.component.ts","webpack:///./src/app/createform/createform.component.css","webpack:///./src/app/createform/createform.component.html","webpack:///./src/app/createform/createform.component.ts","webpack:///./src/app/input-component/input-component.component.css","webpack:///./src/app/input-component/input-component.component.html","webpack:///./src/app/input-component/input-component.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'registermyself';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { routing } from './app.routes';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { CreateformComponent } from './createform/createform.component';\nimport { InputComponentComponent } from './input-component/input-component.component';\nimport { CreateComponent } from './create/create.component';\nimport {NgxWebstorageModule} from 'ngx-webstorage';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    CreateformComponent,\n    InputComponentComponent,\n    CreateComponent\n  ],\n  imports: [\n    BrowserModule,\n    NgxWebstorageModule.forRoot(),\n    routing,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\nimport { ModuleWithProviders } from '@angular/core';\nimport { CreateformComponent } from './createform/createform.component';\nimport { InputComponentComponent } from './input-component/input-component.component';\n\nexport const appRoutes : Routes = [\n    {\n        path: '',\n        component: CreateformComponent\n    },\n    {\n        path: 'preview',\n        component: InputComponentComponent\n    }\n]\n\nexport const routing: ModuleWithProviders = RouterModule.forRoot(appRoutes, {useHash: false});","module.exports = \"\"","module.exports = \"<div class=\\\"row\\\">\\n  <ng-container *ngFor=\\\"let input of data; let i = index;\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <ng-template [ngIf]=\\\"input.type == 'text'\\\">\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"input.for\\\" [(ngModel)]=\\\"input.fieldName\\\" [id]=\\\"input.id\\\">\\n        </div>\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"name_{{i}}\\\" [id]=\\\"input.id\\\" [placeholder]=\\\"input.placeholder\\\" />\\n        </div>\\n        <div class=\\\"col-sm-2\\\" (click)=\\\"removeElement(input.id)\\\">\\n          <i class=\\\"fas fa-trash-alt\\\" role=\\\"button\\\"></i>\\n        </div>\\n      </ng-template>\\n    </div>\\n    <div class=\\\"col-sm-12\\\">\\n      <ng-template [ngIf]=\\\"input.type == 'number'\\\">\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"input.for\\\" [(ngModel)]=\\\"input.fieldName\\\" [id]=\\\"input.id\\\">\\n        </div>\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"number\\\" name=\\\"name_{{i}}\\\" [id]=\\\"input.id\\\" [placeholder]=\\\"input.placeholder\\\" />\\n        </div>\\n        <div class=\\\"col-sm-2\\\" (click)=\\\"removeElement(input.id)\\\">\\n          <i class=\\\"fas fa-trash-alt\\\" role=\\\"button\\\"></i>\\n        </div>\\n      </ng-template>\\n    </div>\\n    <div class=\\\"col-sm-12\\\">\\n      <ng-template [ngIf]=\\\"input.type == 'password'\\\">\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" [placeholder]=\\\"input.for\\\" [(ngModel)]=\\\"input.fieldName\\\" [id]=\\\"input.id\\\">\\n        </div>\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"password\\\" name=\\\"name_{{i}}\\\" [id]=\\\"input.id\\\" [placeholder]=\\\"input.placeholder\\\" />\\n        </div>\\n        <div class=\\\"col-sm-2\\\" (click)=\\\"removeElement(input.id)\\\">\\n          <i class=\\\"fas fa-trash-alt\\\" role=\\\"button\\\"></i>\\n        </div>\\n      </ng-template>\\n    </div>\\n    <div *ngIf=\\\"input.type == 'checkbox'\\\">\\n      <ng-template ngFor let-checkbox [ngForOf]=\\\"input.totalCheckboxes\\\" let-j=\\\"index\\\">\\n        <div class=\\\"col-sm-12\\\">\\n          <div class=\\\"col-sm-5\\\">\\n            <input class=\\\"form-control\\\" type=\\\"checkbox\\\" [id]=\\\"checkbox.id\\\" [value]=\\\"checkbox.label\\\">\\n          </div>\\n          <div class=\\\"col-sm-5\\\">\\n            <input class=\\\"form-control\\\" type=\\\"text\\\" [(ngModel)]=\\\"checkbox.label\\\">\\n          </div>\\n          <div class=\\\"col-sm-2\\\" (click)=\\\"removeElement(input.id)\\\">\\n            <i class=\\\"fas fa-trash-alt\\\" role=\\\"button\\\"></i>\\n          </div>\\n        </div>\\n      </ng-template>\\n    </div>\\n    <div *ngIf=\\\"input.type == 'select'\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <div class=\\\"col-sm-10\\\">\\n          <div class=\\\"dropdown\\\">\\n            <button class=\\\"btn btn-primary dropdown-toggle\\\" type=\\\"button\\\" data-toggle=\\\"dropdown\\\">Dropdown Example\\n              <span class=\\\"caret\\\"></span></button>\\n            <ul class=\\\"dropdown-menu\\\">\\n              <li *ngFor=\\\"let options of input.totalOptions\\\">\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" [id]=\\\"options.id\\\" [(ngModel)]=\\\"options.label\\\">\\n              </li>\\n            </ul>\\n          </div>\\n        </div>\\n        <div class=\\\"col-sm-2\\\" (click)=\\\"removeElement(input.id)\\\">\\n          <i class=\\\"fas fa-trash-alt\\\" role=\\\"button\\\"></i>\\n        </div>\\n      </div>\\n    </div>\\n  </ng-container>\\n</div>\"","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\nimport { element } from 'protractor';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  styleUrls: ['./create.component.css']\n})\nexport class CreateComponent implements OnInit {\n\n  @Input()\n  data: any[] = [];\n\n  @Output()\n  changeName = new EventEmitter;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n  removeElement(id) {\n    var index = -1;\n    this.data.find((element, i) => {\n      if (element.id == id) {\n        index = i;\n        return element;\n      }\n    });\n    this.data.splice(index, 1);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<!-- <div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <form >\\n      <app-input-component [data]=\\\"inputArray\\\" ></app-input-component> \\n    </form>\\n  </div>\\n</div> -->\\n<div class=\\\"container\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <label class=\\\"col-sm-3\\\">Select your field type here</label>\\n      <select class=\\\"selectpicker col-sm-3\\\" [(ngModel)] = \\\"selectedElement\\\">\\n        <option *ngFor=\\\"let value of selectArray\\\" [value]=\\\"value.text\\\">{{value.label}}</option>\\n      </select>\\n      <div class=\\\"col-sm-6\\\" *ngIf=\\\"selectedElement == 'checkbox'\\\">\\n        <label class=\\\"col-sm-4\\\">No. Of Checkboxes</label>\\n        <input class='col-sm-2' type=\\\"text\\\" placeholder=\\\"# of checkbox\\\" [(ngModel)]=\\\"totalCheckboxes\\\">\\n      </div>\\n      <div class=\\\"col-sm-6\\\" *ngIf=\\\"selectedElement == 'select'\\\">\\n        <label class=\\\"col-sm-4\\\">No. Of option</label>\\n        <input class='col-sm-2' type=\\\"text\\\" placeholder=\\\"# of options\\\" [(ngModel)]=\\\"totalOptions\\\">\\n      </div>\\n    </div>\\n    <div class=\\\"col-sm-12\\\">\\n      <button class=\\\"col-sm-3\\\" type=\\\"button\\\" (click)=\\\"addNewElement()\\\"> Add new</button>\\n    </div>\\n    <app-create [data]=\\\"inputArray\\\"></app-create>\\n    <div class=\\\"col-sm-3\\\">\\n      <button type='button' (click)=\\\"showPreview()\\\" >Preview</button>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { SessionStorageService } from 'ngx-webstorage';\n\n@Component({\n  selector: 'app-createform',\n  templateUrl: './createform.component.html',\n  styleUrls: ['./createform.component.css']\n})\nexport class CreateformComponent implements OnInit {\n\n  public inputArray: any[] = [];\n  public selectArray: any[] = [\n    {\n      text: 'text',\n      label: 'Text'\n    },\n    {\n      text: 'number',\n      label: 'Number'\n    },\n    {\n      text: 'checkbox',\n      label: 'Checkbox'\n    },\n    {\n      text: 'select',\n      label: 'Select'\n    },\n    {\n      text: 'password',\n      label: 'Password'\n    },\n    {\n      text: 'radio',\n      label: 'Radio'\n    },\n  ];\n  public selectedElement: string = 'text';\n  public elementName: string = 'Type your field name here';\n  public totalCheckboxes: number = 2;\n  public totalOptions: number = 2;\n  constructor(private router: Router, private sessionStorage: SessionStorageService) { }\n\n  ngOnInit() {\n    this.inputArray = [\n      {\n        placeholder: 'Type your text here',\n        type: 'text',\n        for: this.elementName,\n        id: 0,\n        fieldName: 'Text'\n      },\n      {\n        placeholder: 'Type your text here',\n        type: 'number',\n        for: this.elementName,\n        id: 1,\n        fieldName: 'Number'\n      }\n    ]\n  }\n\n  addNewElement() {\n    console.log(this.inputArray)\n    if (this.selectedElement == 'checkbox') {\n      let totalCheckboxes = [];\n      for(let i = 1; i<= this.totalCheckboxes; i++) {\n        let label = 'Checkbox'+i;\n        totalCheckboxes.push({label: label, id: i});\n      }\n      this.inputArray.push({\n        type: this.selectedElement,\n        for: this.elementName,\n        id: this.inputArray.length,\n        totalCheckboxes: totalCheckboxes,\n        fieldName: this.selectArray.filter(element => element.text == this.selectedElement)[0].label\n      });\n    }\n    if (this.selectedElement == 'select') {\n      let totalOptions = [];\n      for(let i = 1; i<= this.totalOptions; i++) {\n        let label = 'Option'+i;\n        totalOptions.push({label: label, id: i});\n      }\n      this.inputArray.push({\n        type: this.selectedElement,\n        for: this.elementName,\n        id: this.inputArray.length,\n        totalOptions: totalOptions,\n        fieldName: this.selectArray.filter(element => element.text == this.selectedElement)[0].label\n      });\n    }\n    else {\n      this.inputArray.push({\n        placeholder: 'Type your text here',\n        type: this.selectedElement,\n        for: this.elementName,\n        id: this.inputArray.length,\n        fieldName: this.selectArray.filter(element => element.text == this.selectedElement)[0].label\n      });\n    }\n  }\n\n  showPreview() {\n    this.sessionStorage.store('data', this.inputArray);\n    this.router.navigate(['/preview']);\n  }\n\n}\n","module.exports = \".margin {\\n    margin-left: 15px;\\n}\"","module.exports = \"<form id=\\\"form\\\" class=\\\"form-group\\\">\\n  <div class=\\\"row\\\">\\n    <ng-container *ngFor=\\\"let input of data; let i = index;\\\">\\n      <div class=\\\"col-sm-12 formControl\\\" *ngIf=\\\"input.type == 'text'\\\">\\n        <!-- <ng-template > -->\\n        <div class=\\\"col-sm-5\\\">\\n          <label class=\\\"form-control\\\" [id]=\\\"i\\\">{{input.fieldName}}</label>\\n        </div>\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"text\\\" name=\\\"name_{{i}}\\\" [id]=\\\"input.id\\\" [placeholder]=\\\"input.placeholder\\\" />\\n        </div>\\n        <!-- </ng-template> -->\\n      </div>\\n      <div class=\\\"col-sm-12 formControl\\\" *ngIf=\\\"input.type == 'number'\\\">\\n        <!-- <ng-template > -->\\n        <div class=\\\"col-sm-5\\\">\\n          <label class=\\\"form-control\\\" [id]=\\\"i\\\">{{input.fieldName}}</label>\\n        </div>\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"number\\\" name=\\\"name_{{i}}\\\" [id]=\\\"input.id\\\" [placeholder]=\\\"input.placeholder\\\" />\\n        </div>\\n        <!-- </ng-template> -->\\n      </div>\\n      <div class=\\\"col-sm-12 formControl\\\" *ngIf=\\\"input.type == 'password'\\\">\\n        <!-- <ng-template > -->\\n        <div class=\\\"col-sm-5\\\">\\n          <label class=\\\"form-control\\\" [id]=\\\"i\\\">{{input.fieldName}}</label>\\n        </div>\\n        <div class=\\\"col-sm-5\\\">\\n          <input class=\\\"form-control\\\" type=\\\"password\\\" name=\\\"name_{{i}}\\\" [id]=\\\"input.id\\\" [placeholder]=\\\"input.placeholder\\\" />\\n        </div>\\n        <!-- </ng-template> -->\\n      </div>\\n      <div class=\\\"formControl\\\" *ngIf=\\\"input.type == 'checkbox'\\\">\\n        <ng-template ngFor let-checkbox [ngForOf]=\\\"input.totalCheckboxes\\\" let-j=\\\"index\\\">\\n          <div class=\\\"col-sm-5\\\">\\n            <input class=\\\"margin\\\" type=\\\"checkbox\\\" [id]=\\\"checkbox.id\\\" [value]=\\\"checkbox.label\\\">\\n            <label>{{checkbox.label}}</label>\\n          </div>\\n        </ng-template>\\n      </div>\\n      <div class=\\\"formControl\\\" *ngIf=\\\"input.type == 'select'\\\">\\n        <div class=\\\"col-sm-12\\\">\\n          <div class=\\\"col-sm-10\\\">\\n            <select>\\n              <option *ngFor=\\\"let options of input.totalOptions\\\" class=\\\"form-control\\\" [id]=\\\"options.id\\\" [value]=\\\"options.label\\\">\\n                {{options.label}}\\n              </option>\\n            </select>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-container>\\n  </div>\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      <div class=\\\"col-sm-6\\\">\\n        <button class=\\\"btn btn-success\\\" onclick=\\\"submitForm()\\\">Submit</button>\\n      </div>\\n    </div>\\n  </div>\\n</form>\\n<div class=\\\"col-sm-12\\\">\\n  <button type=\\\"button\\\" (click)=\\\"saveForm()\\\">Save</button>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { SessionStorageService } from 'ngx-webstorage';\nimport { FormBuilder, Validators as Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-input-component',\n  templateUrl: './input-component.component.html',\n  styleUrls: ['./input-component.component.css']\n})\nexport class InputComponentComponent implements OnInit {\n\n  public data: any[] = [];\n  public previewForm;\n\n  constructor(\n    private sessionStorage: SessionStorageService,\n    private formBuilder: FormBuilder,\n  ) { }\n\n  ngOnInit() {\n    this.data = this.sessionStorage.retrieve('data');\n  }\n\n  saveForm() {\n    this.previewForm = document.getElementById('form');\n    console.log(this.previewForm);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}